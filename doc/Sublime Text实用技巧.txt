Sublime Text实用技巧
Preferences.sublime-settings设置

打开方式Preferences> Settings-Default

// While you can edit this file, it's best to put your changes in
// "User/Preferences.sublime-settings", which overrides the settings in here.
//
// Settings may also be placed in file type specific options files, for
// example, in Packages/Python/Python.sublime-settings for python files.
{
// Sets the colors used within the text area
// 主题文件的路径
"color_scheme": "Packages/Color Scheme - Default/Monokai.tmTheme",

// Note that the font_face and font_size are overriden in the platform
// specific settings file, for example, "Preferences (Linux).sublime-settings".
// Because of this, setting them here will have no effect: you must set them
// in your User File Preferences.
// 设置字体和大小，必须在Settings-User里重写，这里设置没有任何效果
"font_face": "Consolas",
"font_size": 12,

// Valid options are "no_bold", "no_italic", "no_antialias", "gray_antialias",
// "subpixel_antialias" and "no_round" (OS X only)
// 字体选项：no_bold不显示粗体字，no_italic不显示斜体字，no_antialias和no_antialias关闭反锯齿
// subpixel_antialias和no_round是OS X系统独有的
"font_options": [],

// Characters that are considered to separate words
// 在文字上双击会全选当前的内容，如果里面出现以下字符，就会被截断
"word_separators": "./\\()\"'-:,.;<>~!@#$%^&*|+=[]{}`~?",

// Set to false to prevent line numbers being drawn in the gutter
// 是否显示行号
"line_numbers": true,

// Set to false to hide the gutter altogether
// 是否显示行号边栏
"gutter": true,

// Spacing between the gutter and the text
// 行号边栏和文字的间距
"margin": 4,

// Fold buttons are the triangles shown in the gutter to fold regions of text
// 是否显示代码折叠按钮
"fold_buttons": true,

// Hides the fold buttons unless the mouse is over the gutter
// 不管鼠标在不在行号边栏，代码折叠按钮一直显示
"fade_fold_buttons": true,

// Columns in which to display vertical rulers
//列显示垂直标尺，在中括号里填入数字，宽度按字符计算
"rulers": [],

// Set to true to turn spell checking on by default
// 是否打开拼写检查
"spell_check": false,

// The number of spaces a tab is considered equal to
// Tab键制表符宽度
"tab_size": 4,

// Set to true to insert spaces when tab is pressed
// 设为true时，缩进和遇到Tab键时使用空格替代
"translate_tabs_to_spaces": false,

// If translate_tabs_to_spaces is true, use_tab_stops will make tab and
// backspace insert/delete up to the next tabstop
// translate_tabs_to_spaces设置为true，Tab和Backspace的删除/插入作用于制表符宽度
// 否则作用于单个空格
"use_tab_stops": true,

// Set to false to disable detection of tabs vs. spaces on load
// false时禁止在载入的时候检测制表符和空格
"detect_indentation": true,

// Calculates indentation automatically when pressing enter
// 按回车时，自动与制表位对齐
"auto_indent": true,

// Makes auto indent a little smarter, e.g., by indenting the next line
// after an if statement in C. Requires auto_indent to be enabled.
//针对C语言的
"smart_indent": false,

// Adds whitespace up to the first open bracket when indenting. Requires
// auto_indent to be enabled.
// 需要启用auto_indent，第一次打开括号缩进时插入空格？（没测试出来效果...）
"indent_to_bracket": true,

// Trims white space added by auto_indent when moving the caret off the
// line.
// 显示对齐的白线是否根据回车、tab等操作自动填补
"trim_automatic_white_space": true,

// Disables horizontal scrolling if enabled.
// May be set to true, false, or "auto", where it will be disabled for
// source code, and otherwise enabled.
// 是否自动换行，如果选auto，需要加双引号
"word_wrap": false,

// Set to a value other than 0 to force wrapping at that column rather than the
// window width
// 设置窗口内文字区域的宽度
"wrap_width": 0,

// Set to false to prevent word wrapped lines from being indented to the same
// level
// 防止被缩进到同一级的字换行
"indent_subsequent_lines": true,

// Draws text centered in the window rather than left aligned
// 如果没有定义过，则文件居中显示（比如新建的文件）
"draw_centered": false,

// Controls auto pairing of quotes, brackets etc
// 自动匹配引号，括号等
"auto_match_enabled": true,

// Word list to use for spell checking
// 拼写检查的单词列表路径
"dictionary": "Packages/Language - English/en_US.dic",

// Set to true to draw a border around the visible rectangle on the minimap.
// The color of the border will be determined by the "minimapBorder" key in
// the color scheme
// 代码地图的可视区域部分是否加上边框，边框的颜色可在配色方案上加入minimapBorder键
"draw_minimap_border": false,

// If enabled, will highlight any line with a caret
// 突出显示当前光标所在的行
"highlight_line": false,

// Valid values are "smooth", "phase", "blink", "wide" and "solid".
// 设置光标闪动方式
"caret_style": "smooth",

// Set to false to disable underlining the brackets surrounding the caret
// 是否特殊显示当前光标所在的括号、代码头尾闭合标记
"match_brackets": true,

// Set to false if you'd rather only highlight the brackets when the caret is
// next to one
// 设为false时，只有光标在括号或头尾闭合标记的两端时，match_brackets才生效
"match_brackets_content": true,

// Set to false to not highlight square brackets. This only takes effect if
// match_brackets is true
// 是否突出显示圆括号，match_brackets为true生效
"match_brackets_square": false,

// Set to false to not highlight curly brackets. This only takes effect if
// match_brackets is true
// 是否突出显示大括号，match_brackets为true生效
"match_brackets_braces": false,

// Set to false to not highlight angle brackets. This only takes effect if
// match_brackets is true
// 是否突出显示尖括号，match_brackets为true生效
"match_brackets_angle": false,

// Enable visualization of the matching tag in HTML and XML
// html和xml下突出显示光标所在标签的两端，影响HTML、XML、CSS等
"match_tags": true,

// Highlights other occurrences of the currently selected text
// 全文突出显示和当前选中字符相同的字符
"match_selection": true,

// Additional spacing at the top of each line, in pixels
// 设置每一行到顶部，以像素为单位的间距，效果相当于行距
"line_padding_top": 1,

// Additional spacing at the bottom of each line, in pixels
// 设置每一行到底部，以像素为单位的间距，效果相当于行距
"line_padding_bottom": 1,

// Set to false to disable scrolling past the end of the buffer.
// On OS X, this value is overridden in the platform specific settings, so
// you'll need to place this line in your user settings to override it.
// 设置为false时，滚动到文本的最下方时，没有缓冲区
"scroll_past_end": true,

// This controls what happens when pressing up or down when on the first
// or last line.
// On OS X, this value is overridden in the platform specific settings, so
// you'll need to place this line in your user settings to override it.
// 控制向上或向下到第一行或最后一行时发生什么（没明白也没试出来）
"move_to_limit_on_up_down": false,

// Set to "none" to turn off drawing white space, "selection" to draw only the
// white space within the selection, and "all" to draw all white space
// 按space或tab时，实际会产生白色的点（一个空格一个点）或白色的横线（tab_size设置的制表符的宽度），选中状态下才能看到
// 设置为none时，什么情况下都不显示这些点和线
// 设置为selection时，只显示选中状态下的点和线
// 设置为all时，则一直显示
"draw_white_space": "selection",

// Set to false to turn off the indentation guides.
// The color and width of the indent guides may be customized by editing
// the corresponding .tmTheme file, and specifying the colors "guide",
// "activeGuide" and "stackGuide"
// 制表位的对齐白线是否显示，颜色可在主题文件里设置（guide，activeGuide，stackGuide）
"draw_indent_guides": true,

// Controls how the indent guides are drawn, valid options are
// "draw_normal" and "draw_active". draw_active will draw the indent
// guides containing the caret in a different color.
// 制表位的对齐白线，draw_normal为一直显示，draw_active为只显示当前光标所在的代码控制域
"indent_guide_options": ["draw_normal"],

// Set to true to removing trailing white space on save
// 为true时，保存文件时会删除每行结束后多余的空格
"trim_trailing_white_space_on_save": false,

// Set to true to ensure the last line of the file ends in a newline
// character when saving
// 为true时，保存文件时光标会在文件的最后向下换一行
"ensure_newline_at_eof_on_save": false,

// Set to true to automatically save files when switching to a different file
// or application
// 切换到其它文件标签或点击其它非本软件区域，文件自动保存
"save_on_focus_lost": false,

// The encoding to use when the encoding can't be determined automatically.
// ASCII, UTF-8 and UTF-16 encodings will be automatically detected.
// 编码时不能自动检测编码时，将自动检测ASCII, UTF-8 和 UTF-16
"fallback_encoding": "Western (Windows 1252)",

// Encoding used when saving new files, and files opened with an undefined
// encoding (e.g., plain ascii files). If a file is opened with a specific
// encoding (either detected or given explicitly), this setting will be
// ignored, and the file will be saved with the encoding it was opened
// with.
// 默认编码格式
"default_encoding": "UTF-8",

// Files containing null bytes are opened as hexadecimal by default
// 包含空字节的文件被打开默认为十六进制
"enable_hexadecimal_encoding": true,

// Determines what character(s) are used to terminate each line in new files.
// Valid values are 'system' (whatever the OS uses), 'windows' (CRLF) and
// 'unix' (LF only).
// 每一行结束的时候用什么字符做终止符
"default_line_ending": "system",

// When enabled, pressing tab will insert the best matching completion.
// When disabled, tab will only trigger snippets or insert a tab.
// Shift+tab can be used to insert an explicit tab when tab_completion is
// enabled.
// 设置为enabled时，在一个字符串间按Tab将插入一个制表符
// 设置为true时，按Tab会根据前后环境进行代码自动匹配填补
"tab_completion": true,

// Enable auto complete to be triggered automatically when typing.
// 代码提示
"auto_complete": true,

// The maximum file size where auto complete will be automatically triggered.
// 代码提示的大小限制
"auto_complete_size_limit": 4194304,

// The delay, in ms, before the auto complete window is shown after typing
// 代码提示延迟显示
"auto_complete_delay": 50,

// Controls what scopes auto complete will be triggered in
// 代码提示的控制范围
"auto_complete_selector": "source - comment",

// Additional situations to trigger auto complete
// 触发代码提示的其他情况
"auto_complete_triggers": [ {"selector": "text.html", "characters": "<"} ],

// By default, auto complete will commit the current completion on enter.
// This setting can be used to make it complete on tab instead.
// Completing on tab is generally a superior option, as it removes
// ambiguity between committing the completion and inserting a newline.
// 设为false时，选择提示的代码按回车或点击可以输出出来，但选择true时不会输出而是直接换行
"auto_complete_commit_on_tab": false,

// Controls if auto complete is shown when snippet fields are active.
// Only relevant if auto_complete_commit_on_tab is true.
// auto_complete_commit_on_tab必须为true，控制代码提示的活跃度（没明白...）
"auto_complete_with_fields": false,

// By default, shift+tab will only unindent if the selection spans
// multiple lines. When pressing shift+tab at other times, it'll insert a
// tab character - this allows tabs to be inserted when tab_completion is
// enabled. Set this to true to make shift+tab always unindent, instead of
// inserting tabs.
// 设置为false，使用Shift + tab总是插入制表符
"shift_tab_unindent": true,

// If true, the selected text will be copied into the find panel when it's
// shown.
// On OS X, this value is overridden in the platform specific settings, so
// you'll need to place this line in your user settings to override it.
// 选中的文本按Ctrl + f时，自动复制到查找面板的文本框里
"find_selected_text": true,

//
// User Interface Settings
//

// The theme controls the look of Sublime Text's UI (buttons, tabs, scroll bars, etc)
// Data\Packages\Theme - Default\Default.sublime-theme控制软件的主题
"theme": "Default.sublime-theme",

// Set to 0 to disable smooth scrolling. Set to a value between 0 and 1 to
// scroll slower, or set to larger than 1 to scroll faster
// 滚动的速度
"scroll_speed": 1.0,

// Controls side bar animation when expanding or collapsing folders
// 左边边栏文件夹动画
"tree_animation_enabled": true,
// 标签页的关闭按钮
"show_tab_close_buttons": true,

// OS X 10.7 only: Set to true to disable Lion style full screen support.
// Sublime Text must be restarted for this to take effect.
// 针对OS X
"use_simple_full_screen": false,

// Valid values are "system", "enabled" and "disabled"
// 水平垂直滚动条：system和disabled为默认显示方式，enabled为自动隐藏显示
"overlay_scroll_bars": "system",

//
// Application Behavior Settings
//

// Exiting the application with hot_exit enabled will cause it to close
// immediately without prompting. Unsaved modifications and open files will
// be preserved and restored when next starting.
//
// Closing a window with an associated project will also close the window
// without prompting, preserving unsaved changes in the workspace file
// alongside the project.
// 热推出功能！退出时不会提示是否保存文件，而是直接退出
// 下次打开软件时，文件保持退出前的状态，没来得及保存的内容都在，但并没有真实的写在原文件里
"hot_exit": true,

// remember_open_files makes the application start up with the last set of
// open files. Changing this to false will have no effect if hot_exit is
// true
// 软件使用最后的设定打开文件，hot_exit为true时没有效果
"remember_open_files": true,

// OS X only: When files are opened from finder, or by dragging onto the
// dock icon, this controls if a new window is created or not.
// 针对OS X
"open_files_in_new_window": true,

// Set to true to close windows as soon as the last file is closed, unless
// there's a folder open within the window. This is always enabled on OS X,
// changing it here won't modify the behavior.
// 针对OS X
"close_windows_when_empty": true,
// 哪些文件会被显示到边栏上
// folder_exclude_patterns and file_exclude_patterns control which files
// are listed in folders on the side bar. These can also be set on a per-
// project basis.
"folder_exclude_patterns": [".svn", ".git", ".hg", "CVS"],
"file_exclude_patterns": ["*.pyc", "*.pyo", "*.exe", "*.dll", "*.obj","*.o", "*.a", "*.lib", "*.so", "*.dylib", "*.ncb", "*.sdf", "*.suo", "*.pdb", "*.idb", ".DS_Store", "*.class", "*.psd", "*.db"],
// These files will still show up in the side bar, but won't be included in
// Goto Anything or Find in Files
"binary_file_patterns": ["*.jpg", "*.jpeg", "*.png", "*.gif", "*.ttf", "*.tga", "*.dds", "*.ico", "*.eot", "*.pdf", "*.swf", "*.jar", "*.zip"],

// List any packages to ignore here. When removing entries from this list,
// a restart may be required if the package contains plugins.
// 删除你想要忽略的插件，需要重启
"ignored_packages": ["Vintage"]
}

以上为转载 http://www.feelcss.com/sublime-text-2-settings.html

------------------------------------hll--------------------------------

下面是我使用这sublime text所遇到的BT问题，抽空整理了下来方便大家和自己使用
关于Sublime Text的入门使用方法请看文章下方的外链

1. 空格与制作符无显示
对于用了近两年的notepadd++的我来说，这个问题还是很纠结的，不，应该说是痛苦，
修改上面的文件
"draw_white_space": "selection"改为 "draw_white_space": "all"
怎么样，看到久违的空格与制表符是不是很兴奋啊

2.按下Tab键自动补全代码
这点对于我个人来说也是个不小的麻烦，
修改上面的文件
"tab_completion": true, 改为 "tab_completion": false
这样我们就关闭了Sublime Text自带的 Tab自动补全代码的功能了

3.强大的Zencoding
至于它到底有多强大，还是请大家自己去谷歌吧，这里就不做详解了
LZ怀着敬畏的心情安装了Zencoding，可是Zencoding 自动完成功能多一个<,这让LZ 苦恼不已，
我也看到了网上有N多同事与LZ有相同苦恼的人
不过，现在这个问题就不会在存在了，因为，LZ已经找到了解决之道了，如下：
首先打开Preferences> Browse Packages 这时会打开你本机的一个路径，
找到这个路径下的一个HTML文件夹下的 HTML.sublime-completions文件，拖到Sublime Text 里就可以自动打开了，
也许大家现在已经发现了，这些东西为什么这么眼熟，对了，这就是自动完成文件的蓝本，
大家还记得 Sublime Text的一个全选相同文字的功能吗
以下为例：
{ "trigger": "a", "contents": "<a href=\"$1\">$2</a>" },
选中以上红色区域的文本，按下Alt + F3 然后你会发现整个文件里的很多类似的地方已经全被选中了，
然后按下 Backspace 键（也就是删除键），这时你全选的地方已经被全部删除了，但是光标在停留在了这里被删除的地方里，然后再 输入一个双引号（”），这样自动完成文件里的所有标签的<已被去除，保存并重启，然后，你再试试输入标签按下Tab键，就会发现那个讨人厌，惹人烦的多余 < 已经消失了

4.F11 和 Shift+F11 进入全屏免打扰模式
在 Sublime Text 2 中，只要按下 Control + Shift + Command + F 或是在菜单 View 中选择 Enter Distraction Free Mode 就可以进入这个 UI 最小化模式了。如果是在用 Mac OS X Lion 的话，Sublime Text 2 还同时支持 Lion 的原生全屏模式。
通过修改 “Preferences” -> “File Settings - More” -> “Distraction Free - User” 可以对防干扰模式进行一些设置：

如果，你没做过更改的话 应该是空白的，就在空白的文件里加入以下代码：
{
"line_numbers": false,      //是否显示行号
"gutter": false,                  //是否显示边列
"draw_centered": true,      //是否居中显示
"wrap_width": 80,           //换行宽度(单位：字符)
"word_wrap": true,          //是否自动换行
"scroll_past_end": true     //滚动能否超过结尾
}

根据后面的注释你就能做成相应的修改了
以下就是经典之作了，也许你会现在代码是不居中了，可是为什么代码这么窄呢，好吧，那我们先把自动换行取消了，现在自动换行是取消了，为什么代码是这么久，且不自动换行了呢，哎，真纠结，
好吧让大师兄来教你怎么做

其实就是因为上面这个 "wrap_width": 80 在作怪，只要把这个80修改成你电脑分辨率相符合的宽度即可，我的是本本 1366的宽度，设置成 "wrap_width": 180, 就行了，经设置成180后在全屏模式与全屏免打扰模式皆可代码全屏显示且不出现横向滚动条。

5.Sublime Text Css自动完成
写Css会发现 Sublime Text自动完成时会多一个空格，看着特别别扭现提供解决方法：
首先打开Preferences> Browse Packages 这时会打开你本机的一个路径，
找到这个路径下的一个CSS文件夹下的 css_completions.py(注意区分不是此css_completions.pyc，文件名相似)文件，拖到Sublime Text 里就可以自动打开了，
然后，搜索 关键字l.append((p, p + ": "))  把冒号后面的空格去除，保存即可。

------------------------------------hll--------------------------------
下面给大家几个常用的Sublime Text 使用技巧和插件库的网站 请浏览以下地址：

Sublime Text: The text editor you'll fall in love with官方下载地址 下载最新版Sublime Text
Sublime Text Packages by the Community – wbond  里面有N多Sublime Text插件，最新，最热，下载最多等等
Sublime Text 2 设置文件详解 | Hey@feelcss
Sublime Text 2 入门及技巧 - Lucifr
Zen Coding: 一种快速编写HTML/CSS代码的方法 | CSS | 前端观察
Sublime Text 2 使用 - bhp1127的专栏 - 博客频道 - CSDN.NET

大师兄奉上，全程手码，持续更新，希望能够帮助到大家。

转至前辈博客！